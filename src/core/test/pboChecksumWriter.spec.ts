import { expect } from 'chai';
import { PboChecksumWriter } from '../pboChecksumWriter';

describe('core/pboChecksumWriter', () => {
    describe('writeChecksum', () => {
        it('should inflate the target buffer with a signature', () => {
            const writer = new PboChecksumWriter();

            const source = Buffer.from([0x00, 0x73, 0x72, 0x65, 0x56, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,//signature
                0x65, 0x78, 0x74, 0x31, 0x6e, 0x00, 0x65, 0x78, 0x74, 0x31, 0x76, 0x00,//header1
                0x65, 0x78, 0x74, 0x32, 0x6e, 0x00, 0x65, 0x78, 0x74, 0x32, 0x76, 0x00,//header2
                0x00,//zero
                0x65, 0x6e, 0x74, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,//entry1
                0x65, 0x6e, 0x74, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,//entry2
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);//boundary

            const target = Buffer.allocUnsafe(PboChecksumWriter.blockSize);
            writer.writeChecksum(source, target);

            const expected = Buffer.from([0x00, 0x95, 0x8a, 0x82, 0x57, 0x4f, 0xe1, 0x49, 0x69, 0x5a, 0xe6, 0x65, 0x2a, 0x21, 0xa3, 0xb3, 0xb4, 0xd6, 0x50, 0xb, 0x81]);
            expect(target).to.eql(expected);
        });
    });
});